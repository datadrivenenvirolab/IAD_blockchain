library(rpart.plot)
fit <- rpart(stroke ~ age + hypertension + heart_disease + work_type  + avg_glucose_level + smoking_status,
method ="class",
data = stroke,
control=rpart.control(maxdepth=6,cp=0.01),
parms=list(split='information'))
rpart.plot(fit, type=4, extra=2, clip.right.labs=FALSE, varlen=0, faclen=0)
library(rpart)
library(rpart.plot)
fit <- rpart(stroke ~ age + hypertension + heart_disease + work_type  + avg_glucose_level + smoking_status,
method ="class",
data = stroke,
control=rpart.control(maxdepth=6,cp=0.001),
parms=list(split='information'))
rpart.plot(fit, type=4, extra=2, clip.right.labs=FALSE, varlen=0, faclen=0)
library(rpart)
library(rpart.plot)
fit <- rpart(stroke ~ age + hypertension + heart_disease + work_type  + avg_glucose_level + smoking_status,
method ="class",
data = stroke,
control=rpart.control(maxdepth=6,cp=0.001),
parms=list(split='information'))
rpart.plot(fit, type=4, extra=2, clip.right.labs=FALSE, varlen=0, faclen=0)
pred <-predict(object = naive2, stroke, type = "class")
t <- table(pred, stroke$stroke)
confusionMatrix(t)
library(rpart)
library(rpart.plot)
fit <- rpart(stroke ~ age + hypertension + heart_disease + work_type  + avg_glucose_level + smoking_status,
method ="class",
data = stroke,
control=rpart.control(maxdepth=6,cp=0.001),
parms=list(split='information'))
rpart.plot(fit, type=4, extra=2, clip.right.labs=FALSE, varlen=0, faclen=0)
pred <-predict(object = naive2, stroke, type = "class")
t <- table(pred, stroke$stroke)
confusionMatrix(t)
## DECISION TREE 2: USING THE PARAMETERS DISCOVERED BY FORWARD SELECTION BASED ON P-VALUE
library(rpart)
library(rpart.plot)
fit <- rpart(stroke ~ age + hypertension + heart_disease+ avg_glucose_level,
method ="class",
data = stroke,
control=rpart.control(maxdepth=6,cp=0.001),
parms=list(split='information'))
rpart.plot(fit, type=4, extra=2, clip.right.labs=FALSE, varlen=0, faclen=0)
pred <-predict(object = naive2, stroke, type = "class")
t <- table(pred, stroke$stroke)
confusionMatrix(t)
## DECISION TREE 2: USING THE PARAMETERS DISCOVERED BY FORWARD SELECTION BASED ON P-VALUE
library(rpart)
library(rpart.plot)
fit <- rpart(stroke ~ age + hypertension + heart_disease+ avg_glucose_level,
method ="class",
data = stroke,
control=rpart.control(maxdepth=5,cp=0.001),
parms=list(split='information'))
rpart.plot(fit, type=4, extra=2, clip.right.labs=FALSE, varlen=0, faclen=0)
pred <-predict(object = naive2, stroke, type = "class")
t <- table(pred, stroke$stroke)
confusionMatrix(t)
naive2 <- naiveBayes(stroke ~ age + hypertension + avg_glucose_level + heart_disease,
data = stroke,
laplace = 0.01,
na.action = na.pass)
pred <-predict(object = naive2, stroke, type = "class")
t <- table(pred, stroke$stroke)
confusionMatrix(t)
## DECISION TREE 1: USING THE PARAMETERS DISCOVERED BY LASSO
library(rpart)
library(rpart.plot)
fit <- rpart(stroke ~ age + hypertension + heart_disease + work_type  + avg_glucose_level + smoking_status,
method ="class",
data = stroke,
control=rpart.control(maxdepth=6,cp=0.001),
parms=list(split='information'))
rpart.plot(fit, type=4, extra=2, clip.right.labs=FALSE, varlen=0, faclen=0)
pred <-predict(object = fit, stroke, type = "class")
t <- table(pred, stroke$stroke)
confusionMatrix(t)
## DECISION TREE 2: USING THE PARAMETERS DISCOVERED BY FORWARD SELECTION BASED ON P-VALUE
library(rpart)
library(rpart.plot)
fit2 <- rpart(stroke ~ age + hypertension + heart_disease+ avg_glucose_level,
method ="class",
data = stroke,
control=rpart.control(maxdepth=5,cp=0.001),
parms=list(split='information'))
rpart.plot(fit2, type=4, extra=2, clip.right.labs=FALSE, varlen=0, faclen=0)
pred <-predict(object = fit2, stroke, type = "class")
t <- table(pred, stroke$stroke)
confusionMatrix(t)
## DECISION TREE 2: USING THE PARAMETERS DISCOVERED BY FORWARD SELECTION BASED ON P-VALUE
library(rpart)
library(rpart.plot)
fit2 <- rpart(stroke ~ age + hypertension + heart_disease+ avg_glucose_level,
method ="class",
data = stroke,
control=rpart.control(maxdepth=5,cp=0.001),
parms=list(split='information'))
rpart.plot(fit2, type=4, extra=2, clip.right.labs=FALSE, varlen=0, faclen=0)
pred <-predict(object = fit2, stroke, type = "class")
t <- table(pred, stroke$stroke)
confusionMatrix(t)
# Install devtools as necessary
install.packages("devtools")
devtools::install_github("datadrivenenvirolab/ClimActor", build_vignettes = T)
install.packages("dplyr")
install.packages("phonics")
install.packages("stringdist")
install.packages("stringr")
install.packages("stringi")
install.packages("rvest")
install.packages("tidyr")
install.packages("knitr")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("pryr")
devtools::install_github("datadrivenenvirolab/ClimActor", build_vignettes = T)
devtools::install_github("datadrivenenvirolab/ClimActor", build_vignettes = T)
devtools::install_github("datadrivenenvirolab/ClimActor", build_vignettes = F)
browseVignettes("ClimActor")
devtools::install_github("datadrivenenvirolab/ClimActor", build_vignettes = T)
devtools::install_github("datadrivenenvirolab/ClimActor", build_vignettes = T, force = T)
version
install.packages("VignetteBuilder: knitr")
install.packages("VignetteBuilder")
install.packages("vignettes")
library(ClimActor)
help(ClimActor)
devtools::install_github("datadrivenenvirolab/ClimActor", build_vignettes = F, force = T)
devtools::install_github("datadrivenenvirolab/ClimActor", build_vignettes = T, force = T)
devtools::install_github("datadrivenenvirolab/ClimActor", build_vignettes = F, force = T)
library(ClimActor)
help(dplyr)
browseVignettes(package = "dplyr")
browseVignettes(package = "phonics")
browseVignettes(package = "stringdist")
browseVignettes(package = "stringdist")
browseVignettes(package = "rvest")
browseVignettes(package = "rvest")
data("contextuals")
force(contextuals)
data("key_dict")
data("country_dict")
force(country_dict)
force(key_dict)
View(contextuals)
View(contextuals)
View(country_dict)
View(key_dict)
View(key_dict)
devtools::install_github("datadrivenenvirolab/ClimActor", build_vignettes = T, force = T)
devtools::install_github("datadrivenenvirolab/ClimActor", build_vignettes = F, force = T)
install.packages(ggfortify)
install.packages("ggfortify")
df <- read.csv("V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv")
setwd("~/Desktop/IAD_blockchain/COP2021")
library(ggfortify)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggfortify)
df <- read.csv("V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv", stringsAsFactors = FALSE)
df <- read.csv("users/stefan/Desktop/IAD_blockchain/Web-scraped Data/V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv", stringsAsFactors = FALSE)
df <- read.csv("users/stefan/Desktop/IAD_blockchain/Web-scraped Data/V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv", stringsAsFactors = FALSE)
df <- read.csv("Users/stefan/Desktop/IAD_blockchain/Web-scraped Data/V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/IAD_blockchain")
df <- read.csv("Users/stefan/Desktop/IAD_blockchain/Web-scraped Data/V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv", stringsAsFactors = FALSE)
df <- read.csv("Users/stefan/Desktop/IAD_blockchain/Web-scraped Data/V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv", stringsAsFactors = FALSE)
df <- read.csv("./V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv", stringsAsFactors = FALSE)
df <- read.csv("~/Desktop/IAD_blockchain/Web-scraped data/V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv")
View(df)
library(ggfortify)
pca_res <- prcomp(df[4:7], scale. = TRUE)
autoplot(pca_res, data = df, colour = 'most_prevalent_topic')
autoplot(pca_res, data = df, colour = 'most_prevalent_topic', loadings = TRUE)
autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4)
library(ggfortify)
pca_res <- prcomp(df[4:7], scale. = FALSE)
autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4)
df[,8] <- sapply(df[,8], as.factor)
autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4)
autoplot(pca_res,
data = df,
title = "PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)"
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4)
autoplot(pca_res,
data = df,
title = "PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)",
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4)
autoplot(pca_res,
data = df,
title = "PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)",
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4)
p <- autoplot(pca_res,
data = df,
title = "PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)",
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4)
p + ggtitle('AirPassengers')
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4)
p + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)")
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)")
p
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4)
+ ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)")
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + scale_fill_discrete(name = "Most Prevalent Topic")
p
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + guides(fill=guide_legend(title="New Legend Title"))
p
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + labs(fill='NEW LEGEND TITLE')
p
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + labs(fill='NEW LEGEND TITLE')
p
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + labs(fill='NEW LEGEND TITLE')
p$labels$fill <- "New Legend Title"
p
library(ggfortify)
pca_res <- prcomp(df[4:7], scale. = FALSE)
df[,8] <- sapply(df[,8], as.factor)
colnames(df)[8] <- "Most Prevalent Topic"
p <- autoplot(pca_res,
data = df,
colour = 'Most Prevalent Topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + labs(fill='NEW LEGEND TITLE')
p
df[,8] <- sapply(df[,8], as.factor)
colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'Most Prevalent Topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + labs(fill='NEW LEGEND TITLE')
p <- autoplot(pca_res,
data = df,
colour = 'Most Prevalent Topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + labs(fill='NEW LEGEND TITLE')
library(ggfortify)
pca_res <- prcomp(df[4:7], scale. = FALSE)
df[,8] <- sapply(df[,8], as.factor)
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + labs(fill='NEW LEGEND TITLE')
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'Most Prevalent Topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + labs(fill='NEW LEGEND TITLE')
df <- read.csv("~/Desktop/IAD_blockchain/Web-scraped data/V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv")
View(df)
library(ggfortify)
pca_res <- prcomp(df[4:7], scale. = FALSE)
df[,8] <- sapply(df[,8], as.factor)
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + labs(fill='NEW LEGEND TITLE')
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + scale_fill_discrete(name="Title")
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + guides(fill=guide_legend(title='MY NEW TITLE'))
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme(legend.title=element_blank())
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme(legend.title="Most Prevalent Topic")
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme(legend.title=element_blank()) + labs(fill = "xyz")
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme(legend.title=element_blank()) + labs(colour = "xyz")
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme(legend.title=element_blank()) + scale_fill_discrete(name = "New Legend Title")
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + scale_fill_discrete(name = "New Legend Title")
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)")
p$labels$colour <- "New legend title"
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)")
p$labels$colour <- "Most Prevalent Topic"
p
# colnames(df)[8] <- 'Most Prevalent Topic'
p <- autoplot(pca_res,
data = df,
colour = 'most_prevalent_topic',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme_classic()
p$labels$colour <- "Most Prevalent Topic"
p
g <- autoplot(pca_res,
data = df,
colour = 'income_group',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme_classic()
g$labels$colour <- "Income Group"
g
unique(df['income_group'])
table(df['income_group'])
df[df['income_group'] == ""]
df[df['income_group'] == "",]
df <- read.csv("~/Desktop/IAD_blockchain/Web-scraped data/V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv")
View(df)
df <- df[df['income_group']!='']
df <- read.csv("~/Desktop/IAD_blockchain/Web-scraped data/V2_COMPLETE_DATA_COUNTRY_4TOPICS.csv")
View(df)
df <- df[df['income_group']!='',]
pca_res <- prcomp(df[4:7], scale. = FALSE)
df[,8] <- sapply(df[,8], as.factor)
g <- autoplot(pca_res,
data = df,
colour = 'income_group',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme_classic()
g$labels$colour <- "Income Group"
g
g <- autoplot(pca_res,
data = df,
colour = 'income_group',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme_classic() + scale_fill_brewer(palette="Dark2")
g$labels$colour <- "Income Group"
g
g <- autoplot(pca_res,
data = df,
colour = 'income_group',
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme_classic() + scale_fill_brewer(palette="Set1")
g$labels$colour <- "Income Group"
g
g <- autoplot(pca_res,
data = df,
colour = 'income_group',
loadings = TRUE,
loadings.label = TRUE,
loadings.color = "black",
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme_classic()
g$labels$colour <- "Income Group"
g
g <- autoplot(pca_res,
data = df,
colour = 'income_group',
loadings = TRUE,
loadings.label = TRUE,
loadings.colour = "black",
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme_classic()
g$labels$colour <- "Income Group"
g
g <- autoplot(pca_res,
data = df,
colour = 'income_group',
loadings = TRUE,
loadings.label = TRUE,
loadings.colour = "black",
loadings.label.colour = "black",
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme_classic()
g$labels$colour <- "Income Group"
g
g <- autoplot(pca_res,
data = df,
colour = 'income_group',
loadings = TRUE,
loadings.label = TRUE,
loadings.colour = "black",
loadings.label.colour = "black",
loadings.label.size = 4) + ggtitle("PCA Decomposition of Topic Proportions for All NGOs and IGOs \n (COP 2019, 4-topic LDA model, n = 1118)") + theme_classic()
g$labels$colour <- "Income Group"
g
