str_replace_all(d, "[\r\n]" , " ")
t <- str_replace_all(d, "[\r\n]" , " ")
d <- as.vector(d)
typeof(d)
d[1]
d[1][1]
d[1][1][1]
d <- "Asociación Española del \nGas \nMr. Juan Ramón Arraibi \nDañobeitia"
d <- strsplit(d, "(?= \nMr.)", perl = T)
View(d)
d <- "Asociación Española del \nGas \nMr. Juan Ramón Arraibi \nDañobeitia"
d <- strsplit(d, "(?=\nMr.)", perl = T)
d
d[1][2]
t <- as.array(d)
View(t)
t
d <- strsplit(d, " ")
d <- strsplit(d, ".")
strsplit(d, " ", perl = T)
strsplit(d, "\"", perl = T)
strsplit(d, "\\"", perl = T)
a
a
d <- strsplit(d, "(?=\nMr.)", perl = T)
d <- "Asociación Española del \nGas \nMr. Juan Ramón Arraibi \nDañobeitia"
d <- strsplit(d, "(?=\nMr.)", perl = T)
print(d)
stringi::stri_extract_all_regex(d, '(?<=").*?(?=")')
stringi::stri_extract_all_regex(d[1], '(?<=").*?(?=")')
lapply(regmatches(d, gregexpr('(\").*?(\")', x, perl = TRUE)), function(y) gsub("^\"|\"$", "", y))
lapply(regmatches(d, gregexpr('(\").*?(\")', d, perl = TRUE)), function(y) gsub("^\"|\"$", "", y))
install.packages("qdapRegex")
library(qdapRegex)
rm_between(d, '"', '"', extract=TRUE)
rm_between(d, '"', '"', extract=TRUE)
stringi::stri_extract_all_regex(d, '(?<=").*?(?=")')
stringi::stri_extract_all_regex(d, '(?<=")*?(?=")')
stringi::stri_extract_all_regex(d, '(?<=").*?(?=")')
stringi::stri_extract_all_regex(d, '(?<=").*?(?= ")')
stringi::stri_extract_all_regex(d, '(?<=").*?(?=")')
t< stringi::stri_extract_all_regex(d, '(?<=").*?(?=")')
t
t<- stringi::stri_extract_all_regex(d, '(?<=").*?(?=")')
View(t)
gsub("\\n", " ", t)
gsub("[\\n]", " ", t)
gsub("[\\n]", "", t)
d <- "Asociación Española del \nGas \nMr. Juan Ramón Arraibi \nDañobeitia"
d <- unlist(strsplit(d, "(?=\nMr.)", perl = T))
print(d)
d[1]
d[2]
my_string_new1 <- gsub("[\r\n]", "", d)
my_string_new1
my_string_new1[my_string_new1!=""]
library(dplyr)
library(pdftools)
library(rJava)
library(tabulizer)
setwd("/Users/stefan/Desktop/Data Scraping")
tabul_text <- tabulizer::extract_text("COP2019_sample.pdf")
print(tabul_text)
spl <- strsplit(tabul_text, "  \n") # TO UNLIST IN ORDER TO PARSE!!!!!
print(spl)
spl <- unlist(strsplit(tabul_text, "  \n"))
print(spl)
print(tabul_text)
d <- "Asociación Española del \nGas \nMr. Juan Ramón Arraibi \nDañobeitia"
d <- unlist(strsplit(d, "(?=\nMr[:punct:])", perl = T))
d <- unlist(strsplit(d, "(?=\nMr.)", perl = T))
print(d)
d <- unlist(strsplit(d, "(?=\nMr\.)", perl = T))
d <- "Asociación Española del \nGas \nMr. Juan Ramón Arraibi \nDañobeitia"
d <- unlist(strsplit(d, "(?=\nMr[\.])", perl = T))
d <- unlist(strsplit(d, "(?=\nMr.)", perl = T))
print(d)
d <- unlist(strsplit(d, "(?=\nMr[.])", perl = T))
print(d)
e <- "\nMr. Manuel Fernández Álvarez  \nChief Operating Officer  \nGas & Power  \nNaturgy  \nMs. María Ester García Gómez  \nNaturgy"
e1 <- unlist(strsplit(e, "(?=\nMr[.])", perl = T))
e2 <- gsub("[\r\n]", "", e)
e2[e2!=""]
e <- "\nMr. Manuel Fernández Álvarez  \nChief Operating Officer  \nGas & Power  \nNaturgy  \nMs. María Ester García Gómez  \nNaturgy"
e1 <- unlist(strsplit(e, "(?=\nMr[.])|(?=\nMs[.])", perl = T))
e2 <- gsub("[\r\n]", "", e)
e2[e2!=""]
e <- "\nMr. Manuel Fernández Álvarez  \nChief Operating Officer  \nGas & Power  \nNaturgy  \nMs. María Ester García Gómez  \nNaturgy"
e1 <- unlist(strsplit(e, "?=\nMr[.]|?=\nMs[.]", perl = T))
e1 <- unlist(strsplit(e, "(?=\nMr[.])|?=\nMs[.]", perl = T))
e <- "\nMr. Manuel Fernández Álvarez  \nChief Operating Officer  \nGas & Power  \nNaturgy  \nMs. María Ester García Gómez  \nNaturgy"
e1 <- unlist(strsplit(e, "(?=\nMr[.])|(?=\nMs[.])", perl = T))
e2 <- gsub("[\r\n]", "", e)
e2[e2!=""]
e <- "\nMr. Manuel Fernández Álvarez  \nChief Operating Officer  \nGas & Power  \nNaturgy  \nMs. María Ester García Gómez  \nNaturgy"
e1 <- unlist(strsplit(e, "(?=\nMr[.])", perl = T))
e2<- unlist(strsplit(e1, "(?=\nMs[.])", perl = T))
e3 <- gsub("[\r\n]", "", e2)
e3[e3!=""]
vec <- as.string(vector())
vec <- vector()
vec <- append(vec, "a")
aba <- c("ala", "bala")
vec <- append(vec, aba)
len= lenght(spl)
len= length(spl)
for (i in 1:len) {
print("a")
}
content <- vector()
len<- length(spl)
for (i in 1:len) {
current <- spl[i]
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
}
print(content)
library(dplyr)
library(pdftools)
library(rJava)
library(tabulizer)
setwd("/Users/stefan/Desktop/Data Scraping")
tabul_text <- tabulizer::extract_text("COP2019_sample.pdf")
print(tabul_text)
spl <- unlist(strsplit(tabul_text, "  \n"))
print(spl)
tabul_text <- tabulizer::extract_text("COP2019_sample.pdf")
print(tabul_text)
content <- vector()
current <- tabul_text
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
print(content)
content <- vector()
current <- unlist(strsplit(tabul_text, "  \n"))
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
print(content)
content <- vector()
current <- unlist(strsplit(tabul_text, " \n"))
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
print(content)
content <- vector()
current <- unlist(strsplit(tabul_text, "  \n"))
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
print(content)
which(content = "Non-governmental organizations ")
which(content == "Non-governmental organizations ")
which(content == "^Non-governmental organizations ")
which(grep("^Non-governmental organizations", content)
which(grep("^Non-governmental organizations", content))
which(grep("^Non-governmental organizations", content))
grep("^Non-governmental organizations", content)
content[grep("^Non-governmental organizations", content)]
content[3]
content[3][length(content[3])]
stringr::str_sub(content[3],-1,-1)
organizations <- vector()
for(i in 1:length(content)){
if (stringr::str_sub(content[i],-1,-1) == " "){
organizations <- append(organizations, content[i])
}
}
print(organizations)
content <- vector()
current <- unlist(strsplit(tabul_text, "  \n"))
current <- unlist(strsplit(tabul_text, "  "))
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
print(content)
organizations <- vector()
for(i in 1:length(content)){
if (stringr::str_sub(content[i],-1,-1) == " "){
organizations <- append(organizations, content[i])
}
}
print(organizations)
content[grep("^Non-governmental organizations", content)]
content[grep("^Non-governmental organizations", organizations)]
content <- vector()
current <- unlist(strsplit(tabul_text, "  \n"))
#current <- unlist(strsplit(tabul_text, "  "))
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
print(content)
organizations[grep("^Non-governmental organizations", organizations)]
grep("^Non-governmental organizations", organizations)
print(organizations)
path = "COP2019.pdf"
tabul_text <- tabulizer::extract_text(path, pages = 2:357)
content <- vector()
current <- unlist(strsplit(tabul_text, "  \n"))
current <- unlist(strsplit(tabul_text, "  "))
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
print(content)
organizations <- vector()
for(i in 1:length(content)){
if (stringr::str_sub(content[i],-1,-1) == " "){
organizations <- append(organizations, content[i])
}
}
print(organizations)
organizations <- organizations[organizations!=""]
print(organizations)
organizations <- organizations[organizations != " "]
print(organizations)
org1<- gsub("FCCC/CP/2019/INF.4  299 ", "", organizations)
print(org1)
print(org1[1])
print(organizations[1])
#print(content)
content[1]
content[2]
#print(content)
content[1:40]
content <- vector()
current <- unlist(strsplit(tabul_text, "  \n"))
#current <- unlist(strsplit(tabul_text, "  "))
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
#print(content)
content[1:40]
current[1:40]
content <- vector()
current <- unlist(strsplit(tabul_text, "  \n"))
current[1:40]
current <- unlist(strsplit(tabul_text, " \n"))
current[1:40]
current <- unlist(strsplit(tabul_text, "  \n"))
current[1:40]
content <- vector()
current <- unlist(strsplit(tabul_text, "  \n"))
current[1:40]
current <- unlist(strsplit(tabul_text, "  "))
current[1:40]
current <- unlist(strsplit(tabul_text, " \n"))
current[1:40]
current <- unlist(strsplit(tabul_text, "  \n"))
current[1:40]
current[1:100]
tabul_text[1:100]
content <- vector()
current <- unlist(strsplit(tabul_text, "  \n"))
#current <- unlist(strsplit(tabul_text, "  "))
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
#print(content)
content[1:40]
#print(content)
content[1:100]
#print(content)
content[100:200]
#print(content)
content[200:400]
path = "COP2019.pdf"
tabul_text <- tabulizer::extract_text(path, pages = 215:357)
content <- vector()
current <- unlist(strsplit(tabul_text, "  \n"))
#current <- unlist(strsplit(tabul_text, "  "))
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
organizations <- vector()
for(i in 1:length(content)){
if (stringr::str_sub(content[i],-1,-1) == " "){
organizations <- append(organizations, content[i])
}
}
organizations <- organizations[organizations != " "]
print(organizations)
org1<- gsub("FCCC/CP/2019/INF.4  [[:digit:]][[:digit:]][[:digit:]] ", "", organizations)
print(org1)
org1<- organizations[-grep("^ (continued)", orgnizations)]
org1<- organizations[-grep("^ (continued)", organizations)]
org1
grep("^ (continued)", organizations)
grep("^(continued)", organizations)
grep("continued", organizations)
grep("[(]continued[)]", organizations)
org1 <- organizations[-grep("[(]continued[)]", organizations)]
print(org1)
organizations <- vector()
for(i in 1:length(content)){
if (stringr::str_sub(content[i],-1,-1) == " "){
organizations <- append(organizations, content[i])
}
}
organizations <- organizations[organizations != " "]
print(organizations)
organizations<- gsub("FCCC/CP/2019/INF.4  *[[:digit:]][[:digit:]][[:digit:]] ", "", organizations)
print(organizations)
org1 <- organizations[-grep("[(]continued[)]", organizations)]
print(org1)
grep("^Non-governmental organizations", organizations)
organizations <- organizations[-grep("[(]continued[)]", organizations)]
print(organizations)
# drop first 6 elements
organizations <- organizations[6:length(organizations)]
organizations
organization_extractor <- function(file_path, pages){
tabul_text <- tabulizer::extract_text(file_path, pages)
content <- vector()
current <- unlist(strsplit(tabul_text, "  \n"))
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
current <- gsub("[\r\n]", "", current)
current <- current[current!=""]
content <- append(content, current)
organizations <- vector()
for(i in 1:length(content)){
if (stringr::str_sub(content[i],-1,-1) == " "){
organizations <- append(organizations, content[i])
}
}
organizations <- organizations[organizations != " "]
organizations<- gsub("FCCC/CP/2019/INF.4  *[[:digit:]][[:digit:]][[:digit:]] ", "", organizations)
organizations <- organizations[-grep("[(]continued[)]", organizations)]
return (organizations)
}
# Extracting the text from the pdf in raw format:
tabul_text <- tabulizer::extract_text(path, pages = 215:357)
# "content" will store the (final) modified text (now it is just an empty vector)
content <- vector()
# "current" will store the current modification
# The first modification will be to split the text by the substring containing space and the newline character
current <- unlist(strsplit(tabul_text, "  \n"))
# Second and subsequent modifications: split the text by the title of participants: Mr./Ms./Sr./Sra.
current <- unlist(strsplit(current, "(?=\nMr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nMs[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSr[.])", perl = T))
current <- unlist(strsplit(current, "(?=\nSra[.])", perl = T))
# Remove newline characters from participants' and organizations' names
current <- gsub("[\r\n]", "", current)
# Eliminate empty strings generated after the cleaning process:
current <- current[current!=""]
# Finally, append the modifications to the "content" variable
content <- append(content, current)
# Initializing "organizations" as an empty vector:
ngo_organizations <- vector()
# Iterating through the "content":
for(i in 1:length(content)){
if (stringr::str_sub(content[i],-1,-1) == " "){ # observing that, in general, the organization names in "content" end with a space
ngo_organizations <- append(ngo_organizations, content[i])
}
}
# Cleaning empty strings generated in the appending process:
ngo_organizations <- ngo_organizations[ngo_organizations != " "]
print(ngo_organizations)
# Further cleaning of organization names that contain the page header:
ngo_organizations<- gsub("FCCC/CP/2019/INF.4  *[[:digit:]][[:digit:]][[:digit:]] ", "", ngo_organizations)
print(ngo_organizations)
ngo_organizations <- ngo_organizations[-grep("[(]continued[)]", ngo_organizations)]
print(ngo_organizations)
# Dropping the first 6 elements, as these pertain to another category
ngo_organizations <- ngo_organizations[6:length(ngo_organizations)]
ngo_organizations
read_pdf_as_html <- function(path, extra_args=character()) {
# make sure poppler/pdftohtml is installed
pdftohtml <- Sys.which("pdftohtml")
if (pdftohtml == "") {
stop("The pdftohtml command-line utility must be installed.", call.=FALSE)
}
# make sure the file exists
path <- path.expand(path)
stopifnot(file.exists(path))
# pdf's should really have a PDF extension
stopifnot(tolower(tools::file_ext(path)) == "pdf")
# get by with a little help from our friends
suppressPackageStartupMessages({
library(xml2, warn.conflicts = FALSE, quietly = TRUE)
library(rvest, warn.conflicts = FALSE, quietly = TRUE)
})
# we're going to do the conversion in a temp directory space
td <- tempfile(fileext = "_dir")
dir.create(td)
on.exit(unlink(td, recursive=TRUE), add=TRUE)
# save our current working directory
curwd <- getwd()
on.exit(setwd(curwd), add=TRUE)
# move to the temp space
setwd(td)
file.copy(path, td)
# collect the extra arguments
c(
"-i" # ignore images
) -> args
args <- c(args, extra_args, basename(path), "r-doc") # saves it to r-doc-html.html
# this could take seconds so inform users what's going on
message("Converting ", basename(path), "...")
# we'll let stderr display so you can debug errors
system2(
command = pdftohtml,
args = args,
stdout = TRUE
) -> res
res <- gsub("^Page-", "", res[length(res)])
message("Converted ", res, " pages")
# this will need to be changed if poppler ever does anything different
xml2::read_html("r-docs.html")
}
doc <- read_pdf_as_html("COP2019.pdf")
install.packages("pdftools")
install.packages("pdftools")
doc <- read_pdf_as_html("COP2019.pdf")
doc <- read_pdf_as_html("COP2019.pdf")
setwd("/Users/stefan/Desktop/Data Scraping")
doc <- read_pdf_as_html("COP2019.pdf")
read_pdf_as_html_with_pdfbox <- function(path) {
java <- Sys.which("java")
if (java == "") {
stop("Java binary is not on the system PATH.", call.=FALSE)
}
# get by with a little help from our friends
suppressPackageStartupMessages({
library(httr, warn.conflicts = FALSE, quietly = TRUE)
library(xml2, warn.conflicts = FALSE, quietly = TRUE)
library(rvest, warn.conflicts = FALSE, quietly = TRUE)
})
path <- path.expand(path)
stopifnot(file.exists(path))
# pdf's should really have a PDF extension
stopifnot(tolower(tools::file_ext(path)) == "pdf")
# download the pdfbox "app" if not installed
if (!dir.exists("~/.pdfboxjars")) {
message("~/.pdfboxjars not found. Creating it and downloading pdfbox-app jar...")
dir.create("~/.pdfboxjars")
httr::GET(
url = "http://central.maven.org/maven2/org/apache/pdfbox/pdfbox-app/2.0.12/pdfbox-app-2.0.12.jar",
httr::write_disk(file.path("~/.pdfboxjars", "pdfbox-app-2.0.12.jar")),
httr::progress()
) -> res
httr::stop_for_status(res)
}
# we're going to do the conversion in a temp directory space
tf <- tempfile(fileext = ".html")
on.exit(unlink(tf), add=TRUE)
c(
"-jar",
path.expand(file.path("~/.pdfboxjars", "pdfbox-app-2.0.12.jar")),
"ExtractText",
"-html",
path,
tf
) -> args
# this could take seconds so inform users what's going on
message("Converting ", basename(path), "...")
system2(
command = java,
args = args
) -> res
xml2::read_html(tf)
}
doc <- read_pdf_as_html_with_pdfbox("COP2019.pdf")
